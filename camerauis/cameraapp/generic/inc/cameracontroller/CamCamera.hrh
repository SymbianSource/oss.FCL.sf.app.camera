/*
* Copyright (c) 2007 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  
*
*/

/* 
*This file contains needed UID's and reference paramenter for CCamCamera class
* @Refer CamCamera.h  
*/

#ifndef CAMCAMERA_HRH
#define CAMCAMERA_HRH

#include "CamCamera.h"
#include <ecam.h>
const TInt    KCameraHandle = 2007;

const TUint32 KFlashModeSupport = (  CCamCamera::EFlashNone
                                  |  CCamCamera::EFlashAuto
                                  |  CCamCamera::EFlashForced
                                  |  CCamCamera::EFlashFillIn
                                  |  CCamCamera::EFlashRedEyeReduce 
                                  |  CCamCamera::EFlashSlowFrontSync // Flash at the moment when shutter opens. 
                                  |  CCamCamera::EFlashSlowRearSync  // Flash at the moment when shutter closes. 
                                  |  CCamCamera::EFlashManual 
                                  );

const TUint32 KExposureSupport = (  CCamCamera::EExposureAuto  // Set exposure automatically. Default, always supported. 
                                 |  CCamCamera::EExposureNight // Night-time setting for long exposures. 
                                 |  CCamCamera::EExposureBacklight // Backlight setting for bright backgrounds. 
                                 |  CCamCamera::EExposureCenter // Centered mode for ignoring surroundings. 
                                 |  CCamCamera::EExposureSport // Sport setting for very short exposures. 
                                 |  CCamCamera::EExposureVeryLong // Generalised setting for very long exposures. 
                                 |  CCamCamera::EExposureSnow // Snow setting for daylight exposure.
                                 |  CCamCamera::EExposureBeach // Beach setting for daylight exposure with reflective glare. 
                                 |  CCamCamera::EExposureProgram // Programmed exposure setting. 
                                 |  CCamCamera::EExposureAperturePriority // Aperture setting is given priority. 
                                 |  CCamCamera::EExposureShutterPriority // Shutter speed setting is given priority. 
                                 |  CCamCamera::EExposureManual // User selectable exposure value setting. 
                                 |  CCamCamera::EExposureSuperNight // Exposure night setting with colour removed to get rid of colour noise. 
                                 |  CCamCamera::EExposureInfra //Exposure for infra-red sensor on the camera 
                                 );

const TUint32 KOptionsSupport = ( ~TCameraInfo::EViewFinderDirectSupported
                                    |  TCameraInfo::EViewFinderBitmapsSupported
                                    |  TCameraInfo::EImageCaptureSupported
                                    |  TCameraInfo::EVideoCaptureSupported
                                    |  TCameraInfo::EViewFinderMirrorSupported
                                    |  TCameraInfo::EContrastSupported
                                    |  TCameraInfo::EBrightnessSupported
                                    |  TCameraInfo::EViewFinderClippingSupported
                                    |  TCameraInfo::EImageClippingSupported
                                    |  ~TCameraInfo::EVideoClippingSupported 
                                    ); 
 
const TUint32 KWBSupport       = (  CCamCamera::EWBAuto        // Set white balance automatically. Default, always supported. 
                                 |  CCamCamera::EWBDaylight    // Normal daylight. 
                                 |  CCamCamera::EWBCloudy      // Overcast daylight. 
                                 |  CCamCamera::EWBTungsten    // Tungsten filament lighting. 
                                 |  CCamCamera::EWBFluorescent // Fluorescent tube lighting 
                                 |  CCamCamera::EWBFlash       // Flash lighting. 
                                 |  CCamCamera::EWBSnow        // High contrast daylight primarily snowy 
                                 |  CCamCamera::EWBBeach       // High contrast daylight primarily near the sea 
                                 |  CCamCamera::EWBManual      // User configurable mode 
                                 |  CCamCamera::EWBShade       // Shade
                                 ); 

const TUint32 KImageFormatSupportCAM1 = 
  ( 0
//  | EFormatMonochrome         // 8 bit greyscale values, 0=black, 255=white. 
//  | EFormat16bitRGB444        // Packed RGB triplets, 4 bits per pixel with red in the least significant bits and the 4 most significant bits unused. 
//  | EFormat16BitRGB565        // Packed RGB triplets, 5 bits per pixel for red and blue and 6 bits for green, with red in the least significant bits. 
//  | EFormat32BitRGB888        // Packed RGB triplets, 8 bits per pixel with red in the least significant bits and the 8 most significant bits unused. 
    | CCamCamera::EFormatJpeg               // JFIF JPEG. 
    | CCamCamera::EFormatExif               // EXIF JPEG 
//  | EFormatFbsBitmapColor4K   // CFbsBitmap object with display mode EColor4K. 
//  | EFormatFbsBitmapColor64K  // CFbsBitmap object with display mode EColor64K. 
//  | EFormatFbsBitmapColor16M  // CFbsBitmap object with display mode EColor16M. 
//  | EFormatUserDefined        // Implementation dependent. 
//  | EFormatYUV420Interleaved  // 4:2:0 format, 8 bits per sample, Y00Y01Y10Y11UV. 
//  | EFormatYUV420Planar       // 4:2:0 format, 8 bits per sample, Y00Y01Y02Y03...U0...V0... 
//  | EFormatYUV422             // 4:2:2 format, 8 bits per sample, UY0VY1. 
//  | EFormatYUV422Reversed     // 4:2:2 format, 8 bits per sample, Y1VY0U. 
//  | EFormatYUV444             // 4:4:4 format, 8 bits per sample, Y00U00V00 Y01U01V01... 
//  | EFormatYUV420SemiPlanar   // 4:2:0 format, 8 bits per sample, Y00Y01Y02Y03...U0V0... 
//  | EFormatFbsBitmapColor16MU // CFbsBitmap object with display mode EColor16MU. 
  );
 
const TUint32 KImageFormatSupportCAM2 = 
  ( 0 
  | CCamCamera::EFormatJpeg
  );
 
const TUint32 KVideoFormatSupportCAM1 = 
  ( 0
  | CCamCamera::EFormatFbsBitmapColor4K   
  | CCamCamera::EFormatFbsBitmapColor64K  
  | CCamCamera::EFormatFbsBitmapColor16M  
  | CCamCamera::EFormatFbsBitmapColor16MU 
  );
  
const TUint32 KVideoFormatSupportCAM2 = 
  ( 0
  | CCamCamera::EFormatFbsBitmapColor4K   
  | CCamCamera::EFormatFbsBitmapColor64K  
  | CCamCamera::EFormatFbsBitmapColor16M  
  | CCamCamera::EFormatFbsBitmapColor16MU 
  );

// const TSize KImageSizeJpegCam1  = TSize( 2592, 1944 ); // 5Mpix
const TSize KImageSizeJpegCam1  = TSize( 1600, 1200 ); // 5Mpix
// const TSize KImageSizeExifCam1  = TSize( 2592, 1944 ); // 5Mpix
const TSize KImageSizeExifCam1  = TSize( 1600, 1200 );

const TSize KVideoFrameSizeCam1 = TSize(  640,  480 ); // VGA 

const TSize KImageSizeJpegCam2  = TSize( 2048, 1536 ); // 
const TSize KImageSizeExifCam2  = TSize( 2048, 1536 ); // 
const TSize KVideoFrameSizeCam2 = TSize(  320,  240 ); // VGA 



const TTimeIntervalMicroSeconds32 KDelayReserve  = 500 * 1000; // async
const TTimeIntervalMicroSeconds32 KDelayPowerOn  = 500 * 1000; // async
const TTimeIntervalMicroSeconds32 KDelayPowerOff = 500 * 1000; // synch
const TTimeIntervalMicroSeconds32 KDelayRelease  = 500 * 1000; // synch

const TTimeIntervalMicroSeconds32 KDelayImageCapture          = 500 * 1000; // synch
const TTimeIntervalMicroSeconds32 KDelayImageCaptureComplete  = 500 * 1000; // async from capture start
const TTimeIntervalMicroSeconds32 KVfFrameInterval            = 1000*1000 / 5; // 5 fps
// ===========================================================================

#endif  //CAMCAMERA_H